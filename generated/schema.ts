// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("profileId", Value.fromBigInt(BigInt.zero()));
    this.set("pubCount", Value.fromBigInt(BigInt.zero()));
    this.set("followModule", Value.fromBytes(Bytes.empty()));
    this.set("followNFT", Value.fromBytes(Bytes.empty()));
    this.set("handle", Value.fromString(""));
    this.set("imageURI", Value.fromString(""));
    this.set("followNFTURI", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Profile entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get pubCount(): BigInt {
    let value = this.get("pubCount");
    return value!.toBigInt();
  }

  set pubCount(value: BigInt) {
    this.set("pubCount", Value.fromBigInt(value));
  }

  get followModule(): Bytes {
    let value = this.get("followModule");
    return value!.toBytes();
  }

  set followModule(value: Bytes) {
    this.set("followModule", Value.fromBytes(value));
  }

  get followNFT(): Bytes {
    let value = this.get("followNFT");
    return value!.toBytes();
  }

  set followNFT(value: Bytes) {
    this.set("followNFT", Value.fromBytes(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get followNFTURI(): string {
    let value = this.get("followNFTURI");
    return value!.toString();
  }

  set followNFTURI(value: string) {
    this.set("followNFTURI", Value.fromString(value));
  }
}
