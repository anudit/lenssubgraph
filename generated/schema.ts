// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Profile extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("creator", Value.fromBytes(Bytes.empty()));
    this.set("owner", Value.fromBytes(Bytes.empty()));
    this.set("profileId", Value.fromBigInt(BigInt.zero()));
    this.set("pubCount", Value.fromBigInt(BigInt.zero()));
    this.set("followNFT", Value.fromBytes(Bytes.empty()));
    this.set("handle", Value.fromString(""));
    this.set("imageURI", Value.fromString(""));
    this.set("followNFTURI", Value.fromString(""));
    this.set("createdOn", Value.fromBigInt(BigInt.zero()));
    this.set("followModule", Value.fromBytes(Bytes.empty()));
    this.set("followModuleReturnData", Value.fromBytes(Bytes.empty()));
    this.set("dispatcher", Value.fromBytes(Bytes.empty()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Profile entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Profile entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Profile", id.toString(), this);
    }
  }

  static load(id: string): Profile | null {
    return changetype<Profile | null>(store.get("Profile", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get creator(): Bytes {
    let value = this.get("creator");
    return value!.toBytes();
  }

  set creator(value: Bytes) {
    this.set("creator", Value.fromBytes(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value!.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get pubCount(): BigInt {
    let value = this.get("pubCount");
    return value!.toBigInt();
  }

  set pubCount(value: BigInt) {
    this.set("pubCount", Value.fromBigInt(value));
  }

  get followNFT(): Bytes {
    let value = this.get("followNFT");
    return value!.toBytes();
  }

  set followNFT(value: Bytes) {
    this.set("followNFT", Value.fromBytes(value));
  }

  get handle(): string {
    let value = this.get("handle");
    return value!.toString();
  }

  set handle(value: string) {
    this.set("handle", Value.fromString(value));
  }

  get imageURI(): string {
    let value = this.get("imageURI");
    return value!.toString();
  }

  set imageURI(value: string) {
    this.set("imageURI", Value.fromString(value));
  }

  get followNFTURI(): string {
    let value = this.get("followNFTURI");
    return value!.toString();
  }

  set followNFTURI(value: string) {
    this.set("followNFTURI", Value.fromString(value));
  }

  get createdOn(): BigInt {
    let value = this.get("createdOn");
    return value!.toBigInt();
  }

  set createdOn(value: BigInt) {
    this.set("createdOn", Value.fromBigInt(value));
  }

  get followModule(): Bytes {
    let value = this.get("followModule");
    return value!.toBytes();
  }

  set followModule(value: Bytes) {
    this.set("followModule", Value.fromBytes(value));
  }

  get followModuleReturnData(): Bytes {
    let value = this.get("followModuleReturnData");
    return value!.toBytes();
  }

  set followModuleReturnData(value: Bytes) {
    this.set("followModuleReturnData", Value.fromBytes(value));
  }

  get dispatcher(): Bytes {
    let value = this.get("dispatcher");
    return value!.toBytes();
  }

  set dispatcher(value: Bytes) {
    this.set("dispatcher", Value.fromBytes(value));
  }
}

export class Comment extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("profileId", Value.fromBigInt(BigInt.zero()));
    this.set("pubId", Value.fromBigInt(BigInt.zero()));
    this.set("contentURI", Value.fromString(""));
    this.set("profileIdPointed", Value.fromBigInt(BigInt.zero()));
    this.set("pubIdPointed", Value.fromBigInt(BigInt.zero()));
    this.set("collectModule", Value.fromBytes(Bytes.empty()));
    this.set("collectModuleReturnData", Value.fromBytes(Bytes.empty()));
    this.set("referenceModule", Value.fromBytes(Bytes.empty()));
    this.set("referenceModuleReturnData", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
    this.set("postPointed", Value.fromString(""));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Comment entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Comment entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Comment", id.toString(), this);
    }
  }

  static load(id: string): Comment | null {
    return changetype<Comment | null>(store.get("Comment", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get contentURI(): string {
    let value = this.get("contentURI");
    return value!.toString();
  }

  set contentURI(value: string) {
    this.set("contentURI", Value.fromString(value));
  }

  get profileIdPointed(): BigInt {
    let value = this.get("profileIdPointed");
    return value!.toBigInt();
  }

  set profileIdPointed(value: BigInt) {
    this.set("profileIdPointed", Value.fromBigInt(value));
  }

  get pubIdPointed(): BigInt {
    let value = this.get("pubIdPointed");
    return value!.toBigInt();
  }

  set pubIdPointed(value: BigInt) {
    this.set("pubIdPointed", Value.fromBigInt(value));
  }

  get collectModule(): Bytes {
    let value = this.get("collectModule");
    return value!.toBytes();
  }

  set collectModule(value: Bytes) {
    this.set("collectModule", Value.fromBytes(value));
  }

  get collectModuleReturnData(): Bytes {
    let value = this.get("collectModuleReturnData");
    return value!.toBytes();
  }

  set collectModuleReturnData(value: Bytes) {
    this.set("collectModuleReturnData", Value.fromBytes(value));
  }

  get referenceModule(): Bytes {
    let value = this.get("referenceModule");
    return value!.toBytes();
  }

  set referenceModule(value: Bytes) {
    this.set("referenceModule", Value.fromBytes(value));
  }

  get referenceModuleReturnData(): Bytes {
    let value = this.get("referenceModuleReturnData");
    return value!.toBytes();
  }

  set referenceModuleReturnData(value: Bytes) {
    this.set("referenceModuleReturnData", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get postPointed(): string {
    let value = this.get("postPointed");
    return value!.toString();
  }

  set postPointed(value: string) {
    this.set("postPointed", Value.fromString(value));
  }
}

export class Mirror extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("profileId", Value.fromBigInt(BigInt.zero()));
    this.set("pubId", Value.fromBigInt(BigInt.zero()));
    this.set("profileIdPointed", Value.fromBigInt(BigInt.zero()));
    this.set("pubIdPointed", Value.fromBigInt(BigInt.zero()));
    this.set("referenceModule", Value.fromBytes(Bytes.empty()));
    this.set("referenceModuleReturnData", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Mirror entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Mirror entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Mirror", id.toString(), this);
    }
  }

  static load(id: string): Mirror | null {
    return changetype<Mirror | null>(store.get("Mirror", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): BigInt {
    let value = this.get("profileId");
    return value!.toBigInt();
  }

  set profileId(value: BigInt) {
    this.set("profileId", Value.fromBigInt(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get profileIdPointed(): BigInt {
    let value = this.get("profileIdPointed");
    return value!.toBigInt();
  }

  set profileIdPointed(value: BigInt) {
    this.set("profileIdPointed", Value.fromBigInt(value));
  }

  get pubIdPointed(): BigInt {
    let value = this.get("pubIdPointed");
    return value!.toBigInt();
  }

  set pubIdPointed(value: BigInt) {
    this.set("pubIdPointed", Value.fromBigInt(value));
  }

  get referenceModule(): Bytes {
    let value = this.get("referenceModule");
    return value!.toBytes();
  }

  set referenceModule(value: Bytes) {
    this.set("referenceModule", Value.fromBytes(value));
  }

  get referenceModuleReturnData(): Bytes {
    let value = this.get("referenceModuleReturnData");
    return value!.toBytes();
  }

  set referenceModuleReturnData(value: Bytes) {
    this.set("referenceModuleReturnData", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }
}

export class SocialGraph extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("following", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save SocialGraph entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save SocialGraph entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("SocialGraph", id.toString(), this);
    }
  }

  static load(id: string): SocialGraph | null {
    return changetype<SocialGraph | null>(store.get("SocialGraph", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get following(): Array<string> {
    let value = this.get("following");
    return value!.toStringArray();
  }

  set following(value: Array<string>) {
    this.set("following", Value.fromStringArray(value));
  }
}

export class ProfileCreatorWhitelist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isWhitelisted", Value.fromBoolean(false));
    this.set("lastUpdated", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ProfileCreatorWhitelist entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ProfileCreatorWhitelist entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ProfileCreatorWhitelist", id.toString(), this);
    }
  }

  static load(id: string): ProfileCreatorWhitelist | null {
    return changetype<ProfileCreatorWhitelist | null>(
      store.get("ProfileCreatorWhitelist", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    return value!.toBigInt();
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class FollowModuleWhitelist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isWhitelisted", Value.fromBoolean(false));
    this.set("lastUpdated", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FollowModuleWhitelist entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save FollowModuleWhitelist entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("FollowModuleWhitelist", id.toString(), this);
    }
  }

  static load(id: string): FollowModuleWhitelist | null {
    return changetype<FollowModuleWhitelist | null>(
      store.get("FollowModuleWhitelist", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    return value!.toBigInt();
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class ReferenceModuleWhitelist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isWhitelisted", Value.fromBoolean(false));
    this.set("lastUpdated", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save ReferenceModuleWhitelist entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ReferenceModuleWhitelist entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ReferenceModuleWhitelist", id.toString(), this);
    }
  }

  static load(id: string): ReferenceModuleWhitelist | null {
    return changetype<ReferenceModuleWhitelist | null>(
      store.get("ReferenceModuleWhitelist", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    return value!.toBigInt();
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class CollectModuleWhitelist extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("isWhitelisted", Value.fromBoolean(false));
    this.set("lastUpdated", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectModuleWhitelist entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save CollectModuleWhitelist entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("CollectModuleWhitelist", id.toString(), this);
    }
  }

  static load(id: string): CollectModuleWhitelist | null {
    return changetype<CollectModuleWhitelist | null>(
      store.get("CollectModuleWhitelist", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isWhitelisted(): boolean {
    let value = this.get("isWhitelisted");
    return value!.toBoolean();
  }

  set isWhitelisted(value: boolean) {
    this.set("isWhitelisted", Value.fromBoolean(value));
  }

  get lastUpdated(): BigInt {
    let value = this.get("lastUpdated");
    return value!.toBigInt();
  }

  set lastUpdated(value: BigInt) {
    this.set("lastUpdated", Value.fromBigInt(value));
  }
}

export class Post extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("profileId", Value.fromString(""));
    this.set("pubId", Value.fromBigInt(BigInt.zero()));
    this.set("contentURI", Value.fromString(""));
    this.set("collectModule", Value.fromBytes(Bytes.empty()));
    this.set("collectModuleReturnData", Value.fromBytes(Bytes.empty()));
    this.set("referenceModule", Value.fromBytes(Bytes.empty()));
    this.set("referenceModuleReturnData", Value.fromBytes(Bytes.empty()));
    this.set("timestamp", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save Post entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("Post", id.toString(), this);
    }
  }

  static load(id: string): Post | null {
    return changetype<Post | null>(store.get("Post", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get profileId(): string {
    let value = this.get("profileId");
    return value!.toString();
  }

  set profileId(value: string) {
    this.set("profileId", Value.fromString(value));
  }

  get pubId(): BigInt {
    let value = this.get("pubId");
    return value!.toBigInt();
  }

  set pubId(value: BigInt) {
    this.set("pubId", Value.fromBigInt(value));
  }

  get contentURI(): string {
    let value = this.get("contentURI");
    return value!.toString();
  }

  set contentURI(value: string) {
    this.set("contentURI", Value.fromString(value));
  }

  get collectModule(): Bytes {
    let value = this.get("collectModule");
    return value!.toBytes();
  }

  set collectModule(value: Bytes) {
    this.set("collectModule", Value.fromBytes(value));
  }

  get collectModuleReturnData(): Bytes {
    let value = this.get("collectModuleReturnData");
    return value!.toBytes();
  }

  set collectModuleReturnData(value: Bytes) {
    this.set("collectModuleReturnData", Value.fromBytes(value));
  }

  get referenceModule(): Bytes {
    let value = this.get("referenceModule");
    return value!.toBytes();
  }

  set referenceModule(value: Bytes) {
    this.set("referenceModule", Value.fromBytes(value));
  }

  get referenceModuleReturnData(): Bytes {
    let value = this.get("referenceModuleReturnData");
    return value!.toBytes();
  }

  set referenceModuleReturnData(value: Bytes) {
    this.set("referenceModuleReturnData", Value.fromBytes(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get comments(): Array<string> | null {
    let value = this.get("comments");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set comments(value: Array<string> | null) {
    if (!value) {
      this.unset("comments");
    } else {
      this.set("comments", Value.fromStringArray(<Array<string>>value));
    }
  }
}
